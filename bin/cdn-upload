#!/usr/bin/env node

const knox = require('knox')
const cf = require('cloudfront')
const version = require('../package.json').version
const { promisify } = require('util')
const { relative } = require('path')
const semver = require('semver')

const s3Client = knox.createClient({
  key: process.env.AWS_ACCESS_KEY_ID,
  secret: process.env.AWS_SECRET_ACCESS_KEY,
  bucket: 'bugsnagcdn'
})

const cfClient = cf.createClient(
  process.env.AWS_ACCESS_KEY_ID,
  process.env.AWS_SECRET_ACCESS_KEY
)

const headers = {
  'Cache-Control': 'public, max-age=315360000',
  'x-amz-acl': 'public-read'
}

const upload = (localPath, remotePath) => {
  console.log(`uploading ${relative('..', localPath)} -> ${remotePath}`)
  return promisify(s3Client.putFile.bind(s3Client))(localPath, remotePath, headers)
}

const invalidate = (paths) => {
  console.log(`invaliding CloudFront cache for the following objects:\n${paths.join('\n')}`)
  return promisify(cfClient.createInvalidation.bind(cfClient))('E205JDPNKONLN7', version, paths)
}

const run = async () => {
  // track the uploaded paths so the cache can be invalidated afterwards
  const uploaded = []
  const track = p => {
    uploaded.push(p)
    return p
  }

  // always upload canonical versions
  await upload(`${__dirname}/../dist/bugsnag.js`, track(`/${version}/bugsnag.js`))
  await upload(`${__dirname}/../dist/bugsnag.min.js`, track(`/${version}/bugsnag.min.js`))
  await upload(`${__dirname}/../dist/bugsnag.min.js.map`, track(`/${version}/bugsnag.min.js.map`))

  const isUnstable = semver.prerelease(version).length > 0
  if (!isUnstable) {
    // if this is a release (as opposed to a prerelease), update the major/minor aliases
    const major = `${semver.major(version)}.x.x`
    await upload(`${__dirname}/../dist/bugsnag.js`, track(`/${major}/bugsnag.js`))
    await upload(`${__dirname}/../dist/bugsnag.min.js`, track(`/${major}/bugsnag.min.js`))
    await upload(`${__dirname}/../dist/bugsnag.min.js.map`, track(`/${major}/bugsnag.min.js.map`))

    const minor = `${semver.major(version)}.${semver.minor(version)}.x`
    await upload(`${__dirname}/../dist/bugsnag.js`, track(`/${minor}/bugsnag.js`))
    await upload(`${__dirname}/../dist/bugsnag.min.js`, track(`/${minor}/bugsnag.min.js`))
    await upload(`${__dirname}/../dist/bugsnag.min.js.map`, track(`/${minor}/bugsnag.min.js.map`))
  }

  // invalidate caches for all of the uploaded files
  await invalidate(uploaded)
}

run()
